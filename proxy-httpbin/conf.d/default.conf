server {
    listen       80;
    server_name  reverse-proxy;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    location /not-work/ {
        resolver 127.0.0.11 ipv6=off;
        rewrite ^/not-work/(.*)$ /$1 break;

        set $val bin;
        set $backend http${val}.org;
        proxy_pass https://${backend}:443;
    }

    location /work/ {
        resolver 127.0.0.11 ipv6=off;
        set $backend_uri "/";
        if ($request_uri ~ ^/work/(.*)$) {
            set $backend_uri /$1;
        }
        
        set $val bin;
        set $backend http${val}.org;
        proxy_pass https://${backend}:443${backend_uri};
    }

    location /cookie/ {
        resolver 127.0.0.11 ipv6=off;
        set $backend_uri "/get";
        if ($cookie_hoge != "") {
            set $backend_uri /$cookie_hoge;
        }
        
        set $val bin;
        set $backend http${val}.org;
        add_header X-Backend-URI $backend_uri;
        proxy_pass https://${backend}:443${backend_uri};
    }

    location /set-cookie/ {
        # set $hoge_cookie 'hoge=';
        # if ($arg_hoge != "") {
        #     set $hoge_cookie "hoge=$arg_hoge";
        # }
        set $hoge_cookie "hoge=$arg_hoge";
        add_header Set-Cookie "$hoge_cookie; HttpOnly; Path=/" always;
        rewrite ^.*$ http://localhost:8083/cookie/ redirect;
        add_header Content-Type text/html;
        # return 200 '<html><script>location.href="http://localhost:8083/cookie/";</script></html>';
    }

    location /show-cookie/ {
        add_header Content-Type text/html;
        return 200 '<html><div>hoge=$cookie_hoge</div><div>fuga=$cookie_fuga</div></html>';
    }

    location /map/ {
        if ( $is_valid = 0 ) {
            return 403 'Forbidden';
        }
        return 200 'OK';
    }

    location /rewrite_break_if_return {
        rewrite .* /get break;
        if ($http_hoge != "hogehoge") {
            return 403;
        }
        proxy_pass https://httpbin.org;
    }

    location /if_return_rewrite_break {
        if ($http_hoge != "hogehoge") {
            return 403;
        }
        rewrite .* /get break;
        proxy_pass https://httpbin.org;
    }

    location / {
        proxy_pass https://httpbin.org;
    }
}
